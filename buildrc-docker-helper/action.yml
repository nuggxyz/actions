name: buildrc-docker-helper
description: "This action checks out the code, sets up Buildx and Qemu, generates Docker metadata, logs into Amazon ECR, ensures the ECR repository exists, and builds and pushes the Docker image."
runs:
    using: "composite"
    steps:
        [
            { uses: actions/checkout@v3 },
            {
                id: verify-env,
                shell: bash,
                run:
                    'if [ -z "$GITHUB_TOKEN" ]; then echo "GITHUB_TOKEN is not set" && exit 1; fi;
                    if [[ -z "$BUILDRC_SKIP_DOCKER" ]]; then echo "BUILDRC_SKIP_DOCKER is not set" && exit 1; fi;
                    if [[ "$BUILDRC_SKIP_DOCKER" == "1" ]]; then echo "BUILDRC_SKIP_DOCKER is set to 1, skpping docker build." && exit 0; fi;
                    if [[ -z "$BUILDRC_SKIP_DOCKER_BUILD" ]]; then echo "BUILDRC_SKIP_DOCKER_BUILD is not set" && exit 1; fi;
                    if [[ -z "$BUILDRC_SKIP_DOCKER_TAG" ]]; then echo "BUILDRC_SKIP_DOCKER_TAG is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_DOCKERFILE" ]; then echo "BUILDRC_CONTAINER_DOCKERFILE is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_BUILD_ARGS_JSON_STRING" ]; then echo "BUILDRC_CONTAINER_BUILD_ARGS_JSON_STRING is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_CONTEXT" ]; then echo "BUILDRC_CONTAINER_CONTEXT is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_PLATFORMS_CSV" ]; then echo "BUILDRC_CONTAINER_PLATFORMS_CSV is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_LABELS_JSON_STRING" ]; then echo "BUILDRC_CONTAINER_LABELS_JSON_STRING is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_TAGS_JSON_STRING" ]; then echo "BUILDRC_CONTAINER_TAGS_JSON_STRING is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_BUILD_SPECIFIC_TAGS_JSON_STRING" ]; then echo "BUILDRC_CONTAINER_TAGS_JSON_STRING is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_UPLOAD_TO_AWS" ]; then echo "BUILDRC_CONTAINER_UPLOAD_TO_AWS is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_IMAGES_JSON_STRING" ]; then echo "BUILDRC_CONTAINER_IMAGES_JSON_STRING is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_BUILD_EXISTS" ]; then echo "BUILDRC_CONTAINER_BUILD_EXISTS is not set" && exit 1; fi;
                    if [ "$BUILDRC_CONTAINER_UPLOAD_TO_AWS" == "1" ]; then
                    if [ -z "$BUILDRC_CONTAINER_UPLOAD_TO_AWS_IAM_ROLE" ]; then echo "BUILDRC_CONTAINER_UPLOAD_TO_AWS_IAM_ROLE is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_UPLOAD_TO_AWS_REGION" ]; then echo "BUILDRC_CONTAINER_UPLOAD_TO_AWS_REGION is not set" && exit 1; fi;
                    if [ -z "$BUILDRC_CONTAINER_UPLOAD_TO_AWS_REPOSITORY" ]; then echo "BUILDRC_CONTAINER_UPLOAD_TO_AWS_REPOSITORY is not set" && exit 1; fi;
                    fi',
            },
            { name: qmeu, uses: "docker/setup-qemu-action@v2" },
            {
                id: "buildx",
                uses: docker/setup-buildx-action@v2,
                with: { buildkitd-flags: --debug },
            },

            {
                name: Generate Build Specific Docker metadata,
                id: meta-build,
                uses: docker/metadata-action@v4,
                with:
                    {
                        images: "${{ fromJson(env.BUILDRC_CONTAINER_IMAGES_JSON_STRING) }}",
                        github-token: "${{ env.GITHUB_TOKEN }}",
                        labels: "${{ fromJson(env.BUILDRC_CONTAINER_LABELS_JSON_STRING) }}",
                        tags: "${{ fromJson(env.BUILDRC_CONTAINER_BUILD_SPECIFIC_TAGS_JSON_STRING) }}",
                    },
            },
            {
                name: Generate Full Docker metadata,
                id: meta-full,
                uses: docker/metadata-action@v4,
                with:
                    {
                        images: "${{ fromJson(env.BUILDRC_CONTAINER_IMAGES_JSON_STRING) }}",
                        github-token: "${{ env.GITHUB_TOKEN }}",
                        labels: "${{ fromJson(env.BUILDRC_CONTAINER_LABELS_JSON_STRING) }}",
                        tags: "${{ fromJson(env.BUILDRC_CONTAINER_TAGS_JSON_STRING) }}",
                    },
            },
            {
                id: "aws-auth",
                uses: "aws-actions/configure-aws-credentials@v2",
                if: "${{ env.BUILDRC_CONTAINER_UPLOAD_TO_AWS == '1' }}",
                with:
                    {
                        role-to-assume: "${{ env.BUILDRC_CONTAINER_UPLOAD_TO_AWS_IAM_ROLE }}",
                        role-session-name: "${{ github.run_id }}-${{ github.run_number }}-${{ github.job }}",
                        aws-region: "${{ env.BUILDRC_CONTAINER_UPLOAD_TO_AWS_REGION  }}",
                    },
            },
            {
                name: Login to Amazon ECR,
                id: login-ecr,
                if: "${{ env.BUILDRC_CONTAINER_UPLOAD_TO_AWS == '1' }}",
                uses: aws-actions/amazon-ecr-login@v1,
            },
            {
                name: "Ensure ECR repository exists",
                id: "ensure-ecr-repo",
                shell: bash,
                if: "${{ env.BUILDRC_CONTAINER_UPLOAD_TO_AWS == '1' }}",
                run: 'aws ecr describe-repositories --repository-names "${{ env.BUILDRC_CONTAINER_UPLOAD_TO_AWS_REPOSITORY }}" 2>/dev/null || aws ecr create-repository --repository-name "${{ env.BUILDRC_CONTAINER_UPLOAD_TO_AWS_REPOSITORY }}"',
            },
            {
                name: Login to GitHub Container Registry,
                uses: docker/login-action@v2,
                with:
                    {
                        registry: ghcr.io,
                        username: "${{ github.actor }}",
                        password: "${{ env.GITHUB_TOKEN }}",
                    },
            },
            {
                name: "build image",
                id: "build-and-push-image",
                uses: "docker/build-push-action@v4",
                if: "${{ env.BUILDRC_SKIP_DOCKER_BUILD == '0' }}",
                with: {
                        context: "${{ github.workspace }}",
                        file: "${{ env.BUILDRC_CONTAINER_DOCKERFILE }}",
                        build-args: "${{ fromJson(env.BUILDRC_CONTAINER_BUILD_ARGS_JSON_STRING) }} --progress=plain",
                        push: true,
                        tags: "${{ steps.meta-build.outputs.tags }}",
                        labels: "${{ steps.meta-build.outputs.labels }}",
                        platforms: "${{ env.BUILDRC_CONTAINER_PLATFORMS_CSV }}",
                        github-token: "${{ env.GITHUB_TOKEN }}",
                        cache-from: "type=local,src=/tmp/.buildx-cache",
                        cache-to: "type=local,dest=/tmp/.buildx-cache",
                        provenance: true,
                        sbom: true,
                        load: false, # set to true if you want to load the image into the runner
                    },
            },
            {
                name: "build image",
                id: "just-push-image",
                uses: "docker/build-push-action@v4",
                if: "${{ env.BUILDRC_SKIP_DOCKER_TAG == '0' }}",
                with:
                    {
                        push: true,
                        pull: true,
                        tags: "${{ steps.meta-full.outputs.tags }}",
                        labels: "${{ steps.meta-full.outputs.labels }}",
                        github-token: "${{ env.GITHUB_TOKEN }}",
                    },
            },
        ]
